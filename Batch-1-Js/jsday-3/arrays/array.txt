

 1   Introduction to Arrays
Explanation: An array is a data structure used to store multiple values in a single variable. Arrays can hold different types of data, such as numbers, strings, objects, or even other arrays.
========================================================
 2       Array Indexing
Explanation: Arrays are zero-indexed, meaning the first element is at index 0, the second at index 1, and so on.
let color = ["pink", "red", "white"]
console.log(color[0])
========================================================
3 Array Length
Explanation: The .length property returns the number of elements in an array.
let colors = ['red', 'green', 'blue'];
console.log(colors.length); 

-------------------------------------------------------------------
4 Accessing and Modifying Array Elements
Explanation: You can access an array element using its index. You can also modify elements by directly assigning a new value to a specific index. because array is mutable
let color = ["pink", "red", "white"]

console.log(color[0])
color[0]="blue"
console.log(color[0])

-------------------------------------------------------------------------
5 To print array: forloop & for of loop and for each loop

function to get the index and value

using for loop
function check(array){
  // console.log(array)
// let a = [1,2,3,4,5]
for(let i= 0;i<=array.length;i++ ){

// console.log(`${i} -> ${a[i]} `)
console.log("index",i, "value",array[i])
}
}
check([1,2,3,4,5])

ourput:index 1 value 2
index 2 value 3
index 3 value 4
index 4 value 5
index 5 value undefined
===================================================================
using for of 
let colors = ["pink","red","white"]
for (let value of colors ){
    console.log(value.toUpperCase()) uppercase is the method og string
}
output:PINK
RED
WHITE

=====================================================================

6 array methods:
In JavaScript, array methods are built-in functions that can be used to manipulate and work with arrays. They provide an easy way to perform operations like adding, removing, searching, sorting, and iterating over elements in an array.
----------------------------------------------------
arrays are muatible - we can change the array
note: there are three types of method
1 - Methods That Change the Original Array: [push, pop, unshift, shift, splice, sort, reverse, fill, copyWithin]
2 - Methods That Do Not Change the Original Array (Return a New Array): [map, filter, slice, concat, flat, flatMap, toSorted, toReversed]
Neutral Methods (Do Not Modify or Create Arrays): [forEach, some, every, find, findIndex, includes, ]



 push, pop, shift,concat(),slice(),splice()
------------------------------------------
push() (Adds an element  it may be single or multiple to the end)

let numbers = [1, 2, 3];
numbers.push(4,5,6);
console.log(numbers); // Output: [1, 2, 3, 4]
---------------------------------------------------------------
pop() (Removes the last element) but orginal array will change

let numbers = [1, 2, 3];
console.log(numbers);
let deletedNumbers = numbers.pop();
console.log(numbers);

console.log(deletedNumbers);
output:[ 1, 2, 3 ]
[ 1, 2 ]
3
---------------------------------------------------------------
toString() (it will convert the array into string) but orginal array will remain same
let numbers = [1, 2, 3];
console.log(numbers);
let tostring = numbers.toString();
console.log(tostring);
[ 1, 2, 3 ]
1,2,3
---------------------------------------------------------------

shift() (Removes the first element)


let numbers = [1, 2, 3];
numbers.shift();
console.log(numbers); // Output: [2, 3]
---------------------------------------------------------------
unshift() (Adds an element to the beginning)
let numbers = [2, 3];
numbers.unshift(1);
console.log(numbers); // Output: [1, 2, 3]
---------------------------------------------------------------
concat() (joins multiple array & returns new array it will not change old array)
let arr1 = [1, 2];
let arr2 = [3, 4];
let result = arr1.concat(arr2);
console.log(result); // Output: [1, 2, 3, 4]
---------------------------------------------------------------

slice() (Extracts a portion of an array nedd to provide starting index and ending index but it will not include the ending index & it will not change the orginal array)

let numbers = [1, 2, 3, 4];
let sliced = numbers.slice(1, 3); // Extracts elements from index 1 to 2
console.log(sliced); // Output: [2, 3]
---------------------------------------------------------------
splice() (Adds or removes elements or replace and change the orginal array
it needs 3 parameters start indx, delete count, new element )
array.splice(start, deleteCount, item1, item2, ...);
start: The index at which to start modifying the array.
deleteCount: The number of elements to remove (optional).
item1, item2, ...: Elements to add to the array (optional).
Removing elements

1 You can use splice() to remove elements from an array.


let arr = ["a", "b", "c", "d", "e"];
arr.splice(2, 2); // Start at index 2, remove 2 elements

console.log(arr); // ["a", "b", "e"]
Explanation:

start = 2: Start modifying at index 2 (element "c").
deleteCount = 2: Remove 2 elements ("c" and "d").
Result: The array is updated to ["a", "b", "e"].
let numbers = [1, 2, 3, 4];
---------------------------------
Adding elements
You can also use splice() to add new elements to an array.


let arr = ["a", "b", "c"];
arr.splice(1, 0, "x", "y"); // Start at index 1, remove 0 elements, add "x" and "y"

console.log(arr); // ["a", "x", "y", "b", "c"]
Explanation:

start = 1: Start modifying at index 1 (before "b").
deleteCount = 0: Do not remove any elements.
"x", "y": Add "x" and "y" at index 1.
Result: The array is updated to ["a", "x", "y", "b", "c"].

------------------------------------------
Replacing elements
You can replace elements by combining deletion and addition.

let arr = ["a", "b", "c", "d"];
arr.splice(1, 2, "x", "y"); // Start at index 1, remove 2 elements, add "x" and "y"

console.log(arr); // ["a", "x", "y", "d"]
Explanation:

start = 1: Start modifying at index 1 (element "b").
deleteCount = 2: Remove 2 elements ("b" and "c").
"x", "y": Add "x" and "y" at index 1.
Result: The array is updated to ["a", "x", "y", "d"].
------------------------------------------
4. Removing all elements from a certain index
You can remove all elements from a specific index to the end.

let arr = ["a", "b", "c", "d", "e"];
arr.splice(2); // Start at index 2, remove everything after

console.log(arr); // ["a", "b"]
Explanation:

start = 2: Start modifying at index 2 (element "c").
No deleteCount is specified, so all elements after index 2 are removed.
Result: The array is updated to ["a", "b"].

-------------------------------------------------------------------
5. Extracting removed elements

The splice() method returns the removed elements.

let arr = ["a", "b", "c", "d"];
let removed = arr.splice(1, 2); // Start at index 1, remove 2 elements

console.log(arr); // ["a", "d"]
console.log(removed); // ["b", "c"]
Explanation:

start = 1: Start modifying at index 1 (element "b").
deleteCount = 2: Remove 2 elements ("b" and "c").

--------------------------------------------------------------------
The removed elements (["b", "c"]) are stored in the variable removed.
6. Inserting elements at the beginning
You can insert elements at the start of an array.

let arr = ["b", "c"];
arr.splice(0, 0, "a"); // Start at index 0, remove 0 elements, add "a"

console.log(arr); // ["a", "b", "c"]
Explanation:

start = 0: Start modifying at index 0.
deleteCount = 0: Do not remove any elements.
"a": Add "a" at index 0.
Result: The array is updated to ["a", "b", "c"].

numbers.splice(1, 2, 5, 6); // Removes 2 elements starting at index 1 and adds 5, 6
console.log(numbers); // Output: [1, 5, 6, 4]
========================================================================

Array Iteration Methods are forEach(),map(),filter(),reduce()


forEach() (Executes a function on each element)
let numbers = [1, 2, 3];
numbers.forEach(num => console.log(num)); // Output: 1 2 3

------------------------------------------------------------------------------
map() (Creates a new array with results from a function)

let numbers = [1, 2, 3];
let doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6]

-------------------------------------------------------------------------
filter() (Creates a new array with elements that pass the condition)

let numbers = [1, 2, 3, 4, 5];
let evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers); // Output: [2, 4]

---------------------------------------------------------------------------
reduce() (Reduces the array to a single value)


let numbers = [1, 2, 3, 4];
let sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // Output: 10

==========================================================================


No, for loop and map are not the same, though they can sometimes be used to achieve similar results. Let me explain their differences in detail so you can teach this concept to your students clearly.

1. What is a for Loop?
A for loop is a general-purpose construct used to iterate over an array or a range of values.
It allows you to perform any kind of operation inside the loop (e.g., modifying, filtering, or transforming elements).
It doesn't inherently return anything unless you explicitly collect the results in a new array.
2. What is map?
map is a built-in array method specifically designed for transforming each element of an array and returning a new array of the same length.
It does not modify the original array.
It's often used in functional programming for clean and concise code.


-----------------------------------------------------------------------------------
1. map
What is map?
map is used to transform elements of an array.
It creates a new array by applying a callback function to each element of the original array.
The original array remains unchanged.

Syntax:
array.map((element, index, array) => {
  // return transformed value
});
element: The current element being processed.
index: The index of the current element.
array: The original array (optional parameter).
Example:

const numbers = [1, 2, 3, 4, 5];

// Double each number using map
const doubledNumbers = numbers.map((num) => num * 2);

console.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]
console.log(numbers); // Original array remains unchanged: [1, 2, 3, 4, 5]
Explanation:
map iterates over each element in the numbers array.
For each element (num), it multiplies the number by 2 and returns the result.
These transformed values are stored in a new array called doubledNumbers.
When to use map:
Use map when you want to transform data, such as converting values, applying formulas, or formatting strings.
---------------------------------------------------------------
2. filter
What is filter?
filter is used to select specific elements from an array based on a condition.
It creates a new array containing only the elements that meet the condition.
The original array remains unchanged.

Syntax:
array.filter((element, index, array) => {
  // return true or false
});
element: The current element being processed.
index: The index of the current element.
array: The original array (optional parameter).
Example:

const numbers = [1, 2, 3, 4, 5];

// Get only even numbers
const evenNumbers = numbers.filter((num) => num % 2 === 0);

console.log(evenNumbers); // Output: [2, 4]
console.log(numbers); // Original array remains unchanged: [1, 2, 3, 4, 5]
Explanation:
filter checks each element of the numbers array.
The condition num % 2 === 0 evaluates whether the number is even.
Only the elements that satisfy the condition (true) are included in the new array called evenNumbers.
When to use filter:
Use filter when you want to extract a subset of elements that meet a specific condition, such as finding even numbers, filtering by a keyword, or removing invalid data.

------------------------------------------------------------------------------------
3. forEach
What is forEach?
forEach is used to iterate over an array and execute a function for each element.
Unlike map and filter, it does not return a new array. It simply performs an action for each element.
When to use forEach:
Use forEach when you want to perform an action for each element without the need to return or create a new array, such as logging, updating the DOM, or making API calls.
Syntax:

array.forEach((element, index, array) => {
  // perform action
});
element: The current element being processed.
index: The index of the current element.
array: The original array (optional parameter).
Example:

const numbers = [1, 2, 3, 4, 5];

// Print each number
numbers.forEach((num) => {
  console.log(num);
});

// Output:
// 1
// 2
// 3
// 4
// 5
Explanation:
forEach loops through each element in the numbers array.
For each element (num), it executes the console.log() function.
Unlike map or filter, forEach does not return a new array or modify the original array.
