Set:
In JavaScript, a Set is a built-in object that allows you to store unique values of any type, whether primitive values or object references. Unlike arrays, Sets do not allow duplicate elements.
syntax & creating Set
let mySet = new Set([]);

const mySet = new Set([1, 2, 3, 4,1,2,2,3,4,5,]);
console.log(mySet)
mySet.add(55);
mySet.add(2);
console.log(mySet)

2. Adding elements to a Set:
You can add elements using the add() method. If the value already exists, it won't be added again.

mySet.add(5);
mySet.add(2); // Will not be added because 2 already exists

3. Checking if a value exists in a Set
You can use the has() method to check if a value is in the Set.
mySet.has(2); // true
mySet.has(10); // false

4. Removing elements from a Set
The delete() method removes an element from a Set.
mySet.delete(2); // Removes 2 from the Set

6. Size of a Set
The size property returns the number of elements in the Set.
console.log(mySet.size); // Number of elements

7. Clearing all elements in a Set
The clear() method removes all elements from the Set.
mySet.clear();
console.log(mySet.size); // 0

5. loops: We cannot directly use map() or other array-specific methods like filter() or reduce() with a Set because these methods are not available on Set objects. However, you can still iterate over a Set using loops or convert it into an array first to use map().

Here are your options for iterating over a Set:

1. Using for...of Loop
const mySet = new Set([1, 2, 3, 4]);
for (const value of mySet) {
  console.log(value);
}


2. Using forEach() Method
const mySet = new Set([1, 2, 3, 4]);
mySet.forEach(value => {
  console.log(value);
});
--------------------------------------------------------------------------------
In JavaScript, you can convert a Set into an Array easily using a few different methods.

1. Using the Spread Operator (...)
The spread operator expands the elements of the Set into an array.
let data = new Set([1,2,3,4,5,6])
console.log("am set",data)
data = [...data]
console.log( "am array" ,data)


2. Using the Array.from() Method
The Array.from() method converts an iterable or array-like object into an array. Since Set is iterable, you can pass it directly.
const mySet = new Set([1, 2, 3, 4]);
const myArray = Array.from(mySet);

console.log(myArray); // [1, 2, 3, 4]

3. Using a  for Loop
You can iterate over the Set and manually push its elements into an array.
const mySet = new Set([1, 2, 3, 4]);
const myArray = [];

for (const value of mySet) {
  myArray.push(value);
}

console.log(myArray); // [1, 2, 3, 4]

===========================================================================================
not necessary

In JavaScript, you can convert a Set into a Map by iterating over the Set and creating key-value pairs. Since a Set only stores values (no inherent keys), you need to define how the keys will be generated.

1.Using Array Index as the Key
const mySet = new Set(["apple", "banana", "cherry"]);
const myMap = new Map();

let index = 0;
for (const value of mySet) {
  myMap.set(index, value);
  index++;
}

console.log(myMap);
// Map(3) { 0 => 'apple', 1 => 'banana', 2 => 'cherry' }
----------------------------------------

2. Using the Spread Operator
const mySet = new Set(["apple", "banana", "cherry"]);

// Spread operator to create key-value pairs
const myMap = new Map([...mySet].map((value, index) => [index, value]));

console.log(myMap);
// Map(3) { 0 => 'apple', 1 => 'banana', 2 => 'cherry' }
